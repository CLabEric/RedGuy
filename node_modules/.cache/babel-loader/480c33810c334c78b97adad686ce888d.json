{"ast":null,"code":"var _jsxFileName = \"/home/eric/Ethereum/john/frontend/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  if (window.ethereum === undefined) {\n    // return <NoWalletDetected />;\n    console.log('no wallet');\n  } else {\n    console.log('yes wallet');\n  }\n\n  const connectWallet = async () => {\n    const [selectedAddress] = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }); // console.log(selectedAddress);\n\n    console.log(_checkNetwork());\n  }; // This method checks if Metamask selected network is Localhost:8545 \n\n\n  const _checkNetwork = () => {\n    if (window.ethereum.networkVersion === 31337) {\n      return true;\n    } // this.setState({ \n    //   networkError: 'Please connect Metamask to Localhost:8545'\n    // });\n\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: connectWallet,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Mint Button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/eric/Ethereum/john/frontend/src/App.js"],"names":["App","window","ethereum","undefined","console","log","connectWallet","selectedAddress","request","method","_checkNetwork","networkVersion"],"mappings":";;;AACA,SAASA,GAAT,GAAe;AAEb,MAAIC,MAAM,CAACC,QAAP,KAAoBC,SAAxB,EAAmC;AACjC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAHD,MAGO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;;AAED,QAAMC,aAAa,GAAG,YAAY;AAChC,UAAM,CAACC,eAAD,IAAoB,MAAMN,MAAM,CAACC,QAAP,CAAgBM,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAhC,CADgC,CAEhC;;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAaK,aAAa,EAA1B;AACD,GAJD,CATa,CAiBb;;;AACA,QAAMA,aAAa,GAAG,MAAM;AAC1B,QAAIT,MAAM,CAACC,QAAP,CAAgBS,cAAhB,KAAmC,KAAvC,EAA8C;AAC5C,aAAO,IAAP;AACD,KAHyB,CAK1B;AACA;AACA;;;AAEA,WAAO,KAAP;AACD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,6BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAGL,aAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;KA5CQN,G;AA8CT,eAAeA,GAAf","sourcesContent":["\nfunction App() {\n\n  if (window.ethereum === undefined) {\n    // return <NoWalletDetected />;\n    console.log('no wallet');\n  } else {\n    console.log('yes wallet');\n  }\n\n  const connectWallet = async () => {\n    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    // console.log(selectedAddress);\n    console.log( _checkNetwork() );\n  }\n\n\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  const _checkNetwork = () => {\n    if (window.ethereum.networkVersion === 31337) {\n      return true;\n    }\n\n    // this.setState({ \n    //   networkError: 'Please connect Metamask to Localhost:8545'\n    // });\n\n    return false;\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button \n          type=\"button\"\n          onClick={ connectWallet }\n        >\n          connect wallet\n        </button>\n      </div>\n      <div>description</div>\n      <div>Mint Button</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}