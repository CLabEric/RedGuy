{"ast":null,"code":"var _jsxFileName = \"/home/eric/Ethereum/john/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport contractAddress from \"../contracts/contract-address.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [contract, setContract] = useState({});\n  const [message, setMessage] = useState('default message');\n\n  const connectWallet = async () => {\n    if (!_checkNetwork()) return;\n    const [selectedAddress] = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    _initialize(selectedAddress);\n  }; // checks if Metamask selected network is Localhost:8545\n  // augment to handle other networks\n\n\n  const _checkNetwork = () => {\n    const HARDHAT_NETWORK_ID = '31337';\n\n    if (!window.ethereum) {\n      setMessage('No wallet detected. Please install Metamask');\n      return false;\n    } else if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      setMessage('Connected to Hardhat network');\n      return true;\n    } else {\n      setMessage('Please connect Metamask to Localhost:8545');\n      return false;\n    }\n  };\n\n  const _initialize = userAddress => {\n    // This method initializes the dapp\n    console.log(userAddress); // We first store the user's address in the component's state\n    // this.setState({\n    //   selectedAddress: userAddress,\n    // });\n\n    _initializeEthers(); // this._getTokenData();\n\n  };\n\n  const _initializeEthers = async () => {\n    const _provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    console.log(contractAddress); // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    // const contract = new ethers.Contract(\n    //   contractAddress.Token,\n    //   TokenArtifact.abi,\n    //   _provider.getSigner(0)\n    // );\n    // setContract(contract);\n    // console.log(contract);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: connectWallet,\n        children: \"connect wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Mint Button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1JJQ8YqSEFoaX9T+v1aajb60pdY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/eric/Ethereum/john/frontend/src/App.js"],"names":["useState","ethers","contractAddress","App","contract","setContract","message","setMessage","connectWallet","_checkNetwork","selectedAddress","window","ethereum","request","method","_initialize","HARDHAT_NETWORK_ID","networkVersion","userAddress","console","log","_initializeEthers","_provider","providers","Web3Provider"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,iBAAD,CAAtC;;AAEA,QAAMQ,aAAa,GAAG,YAAY;AAChC,QAAG,CAACC,aAAa,EAAjB,EAAqB;AAErB,UAAM,CAACC,eAAD,IAAoB,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAhC;;AAEAC,IAAAA,WAAW,CAAEL,eAAF,CAAX;AACD,GAND,CAJa,CAYb;AACA;;;AACA,QAAMD,aAAa,GAAG,MAAM;AAC1B,UAAMO,kBAAkB,GAAG,OAA3B;;AAEA,QAAI,CAACL,MAAM,CAACC,QAAZ,EAAsB;AACpBL,MAAAA,UAAU,CAAC,6CAAD,CAAV;AACA,aAAO,KAAP;AACD,KAHD,MAGO,IAAII,MAAM,CAACC,QAAP,CAAgBK,cAAhB,KAAmCD,kBAAvC,EAA2D;AAChET,MAAAA,UAAU,CAAC,8BAAD,CAAV;AACA,aAAO,IAAP;AACD,KAHM,MAGA;AACLA,MAAAA,UAAU,CAAC,2CAAD,CAAV;AACA,aAAO,KAAP;AACD;AACF,GAbD;;AAeA,QAAMQ,WAAW,GAAIG,WAAD,IAAiB;AACnC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAFmC,CAGnC;AACA;AACA;AACA;;AAEAG,IAAAA,iBAAiB,GARkB,CASnC;;AACD,GAVD;;AAYA,QAAMA,iBAAiB,GAAG,YAAY;AACpC,UAAMC,SAAS,GAAG,IAAIrB,MAAM,CAACsB,SAAP,CAAiBC,YAArB,CAAkCb,MAAM,CAACC,QAAzC,CAAlB;;AACJO,IAAAA,OAAO,CAACC,GAAR,CAAYlB,eAAZ,EAFwC,CAGpC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACD,GAbD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,6BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAGM,aAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAvEQL,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\nfunction App() {\n  const [contract, setContract] = useState({});\n  const [message, setMessage] = useState('default message');\n\n  const connectWallet = async () => {\n    if(!_checkNetwork()) return;\n\n    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    _initialize( selectedAddress );\n  }\n\n  // checks if Metamask selected network is Localhost:8545\n  // augment to handle other networks\n  const _checkNetwork = () => {\n    const HARDHAT_NETWORK_ID = '31337';\n\n    if (!window.ethereum) {\n      setMessage('No wallet detected. Please install Metamask');\n      return false;\n    } else if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      setMessage('Connected to Hardhat network');\n      return true;\n    } else {\n      setMessage('Please connect Metamask to Localhost:8545');\n      return false;\n    }\n  }\n\n  const _initialize = (userAddress) => {\n    // This method initializes the dapp\n    console.log(userAddress);\n    // We first store the user's address in the component's state\n    // this.setState({\n    //   selectedAddress: userAddress,\n    // });\n\n    _initializeEthers();\n    // this._getTokenData();\n  }\n\n  const _initializeEthers = async () => {\n    const _provider = new ethers.providers.Web3Provider(window.ethereum);\nconsole.log(contractAddress);\n    // Then, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    // const contract = new ethers.Contract(\n    //   contractAddress.Token,\n    //   TokenArtifact.abi,\n    //   _provider.getSigner(0)\n    // );\n\n    // setContract(contract);\n    // console.log(contract);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button \n          type=\"button\"\n          onClick={ connectWallet }\n        >\n          connect wallet\n        </button>\n      </div>\n      <div>description</div>\n      <div>Mint Button</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}